{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":9867425,"sourceType":"datasetVersion","datasetId":5851979}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n#         print(os.path.join(dirname, filename))\n        break\n        \n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-11T05:27:32.406968Z","iopub.execute_input":"2024-11-11T05:27:32.407824Z","iopub.status.idle":"2024-11-11T05:27:32.940846Z","shell.execute_reply.started":"2024-11-11T05:27:32.407781Z","shell.execute_reply":"2024-11-11T05:27:32.939935Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install ultralytics","metadata":{"execution":{"iopub.status.busy":"2024-11-11T05:28:06.202047Z","iopub.execute_input":"2024-11-11T05:28:06.202888Z","iopub.status.idle":"2024-11-11T05:28:20.048297Z","shell.execute_reply.started":"2024-11-11T05:28:06.202848Z","shell.execute_reply":"2024-11-11T05:28:20.04734Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import shutil\nimport os\nimport torch\nfrom base64 import b64encode\nfrom ultralytics import YOLO\nfrom IPython.display import Image, HTML\nfrom tqdm import tqdm","metadata":{"execution":{"iopub.status.busy":"2024-11-11T05:28:23.168479Z","iopub.execute_input":"2024-11-11T05:28:23.168875Z","iopub.status.idle":"2024-11-11T05:28:24.038628Z","shell.execute_reply.started":"2024-11-11T05:28:23.168838Z","shell.execute_reply":"2024-11-11T05:28:24.037828Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Is CUDA available:\", torch.cuda.is_available())\nprint(\"Number of GPUs:\", torch.cuda.device_count())\nprint(\"CUDA Device Name:\", torch.cuda.get_device_name(0) if torch.cuda.is_available() else \"No GPU\")","metadata":{"execution":{"iopub.status.busy":"2024-11-11T05:28:30.379102Z","iopub.execute_input":"2024-11-11T05:28:30.379632Z","iopub.status.idle":"2024-11-11T05:28:30.464929Z","shell.execute_reply.started":"2024-11-11T05:28:30.379595Z","shell.execute_reply":"2024-11-11T05:28:30.463884Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!nvidia-smi","metadata":{"execution":{"iopub.status.busy":"2024-11-11T05:28:40.882049Z","iopub.execute_input":"2024-11-11T05:28:40.882477Z","iopub.status.idle":"2024-11-11T05:28:41.990998Z","shell.execute_reply.started":"2024-11-11T05:28:40.88244Z","shell.execute_reply":"2024-11-11T05:28:41.989896Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data_yml_path = '/kaggle/input/potholes-detection-yolov8/data.yaml'\nresults_path = '/kaggle/working/runs/detect/'\nweights = 'yolo11n.pt' # https://docs.ultralytics.com/models/\nbatch_size = 64","metadata":{"execution":{"iopub.status.busy":"2024-11-11T05:28:46.962341Z","iopub.execute_input":"2024-11-11T05:28:46.963386Z","iopub.status.idle":"2024-11-11T05:28:46.968203Z","shell.execute_reply.started":"2024-11-11T05:28:46.96334Z","shell.execute_reply":"2024-11-11T05:28:46.967265Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### Training YOLO with Distributed Data Parallel (DDP)\n\nThis script provides a Python-based approach to train the YOLO model using the Ultralytics library with multi-GPU support through PyTorch's Distributed Data Parallel (DDP).\n\n#### Parameters Explained\n\n- **batch_size**: Defines the batch size for each training iteration. Typical values are 32, 64, or 128, but can be adjusted based on GPU memory capacity.\n- **data_path**: Specifies the path to the data configuration file, which includes dataset paths and training parameters.\n- **weights**: The model's starting weights, usually from a pre-trained YOLO model.\n- **devices**: Comma-separated GPU IDs for distributed training; adjust based on available GPUs.\n\n#### Additional Resources\n\n- **[Ultralytics Documentation](https://docs.ultralytics.com/)**: Provides detailed information on YOLO model usage, parameters, and customization options.\n- **[PyTorch DDP Documentation](https://pytorch.org/docs/stable/distributed.html)**: Official documentation for using DistributedDataParallel in multi-GPU training.","metadata":{}},{"cell_type":"code","source":"def train_yolo_with_multi_gpu(\n    data_path: str = data_yml_path,\n    epochs: int = 150,\n    batch_size: int = batch_size,\n    weights: str = weights,\n    imgsz: int = 640,\n    devices: str = '0,1', \n    **kwargs\n) -> None:\n    \n   \n    model = YOLO(weights)\n    \n    \n    model.train(\n        data=data_path,\n        epochs=epochs,\n        batch=batch_size,\n        imgsz=imgsz,\n        device=devices,  \n        **kwargs\n    )\n\n# Jalankan pelatihan\ntrain_yolo_with_multi_gpu()","metadata":{"execution":{"iopub.status.busy":"2024-11-11T05:28:51.829196Z","iopub.execute_input":"2024-11-11T05:28:51.830025Z","iopub.status.idle":"2024-11-11T06:26:55.862062Z","shell.execute_reply.started":"2024-11-11T05:28:51.829984Z","shell.execute_reply":"2024-11-11T06:26:55.860964Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# def train_yolo_with_single_gpu(     \n#     data_path: str=data_yml_path,\n#     epochs: int=100,\n#     batch_size: int=batch_size,\n#     weights: str=weights,\n#     imgsz: int=640,\n#     device: str='0', \n#     **kwargs\n    \n#     ) -> None:\n    \n#     model = YOLO(weights)\n    \n#     model.train(\n#         data=data_path,\n#         epochs=epochs,\n#         batch=batch_size,\n#         imgsz=imgsz,\n#         device=device\n#     )\n\n# train_yolo_with_single_gpu()","metadata":{"execution":{"iopub.status.busy":"2024-11-11T06:27:05.873117Z","iopub.execute_input":"2024-11-11T06:27:05.87439Z","iopub.status.idle":"2024-11-11T06:27:05.879887Z","shell.execute_reply.started":"2024-11-11T06:27:05.874347Z","shell.execute_reply":"2024-11-11T06:27:05.878907Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# def train_yolo_with_cpu(     \n#     data_path: str=data_yml_path,\n#     epochs: int=100,\n#     batch_size: int=batch_size,\n#     weights: str=weights,\n#     imgsz: int=640,\n#     device: str='cpu', \n#     **kwargs\n    \n#     ) -> None:\n    \n#     model = YOLO(weights)\n    \n#     model.train(\n#         data=data_path,\n#         epochs=epochs,\n#         batch=batch_size,\n#         imgsz=imgsz,\n#         device=device\n#     )\n\n# train_yolo_with_cpu()","metadata":{"execution":{"iopub.status.busy":"2024-11-11T06:27:07.94174Z","iopub.execute_input":"2024-11-11T06:27:07.942129Z","iopub.status.idle":"2024-11-11T06:27:07.946916Z","shell.execute_reply.started":"2024-11-11T06:27:07.942092Z","shell.execute_reply":"2024-11-11T06:27:07.945912Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Image(results_path + \"train/confusion_matrix.png\", width=600)","metadata":{"execution":{"iopub.status.busy":"2024-11-11T06:27:08.698598Z","iopub.execute_input":"2024-11-11T06:27:08.699691Z","iopub.status.idle":"2024-11-11T06:27:08.711922Z","shell.execute_reply.started":"2024-11-11T06:27:08.69965Z","shell.execute_reply":"2024-11-11T06:27:08.710988Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Image(results_path + \"train/results.png\", width=600)","metadata":{"execution":{"iopub.status.busy":"2024-11-11T06:27:21.558704Z","iopub.execute_input":"2024-11-11T06:27:21.559097Z","iopub.status.idle":"2024-11-11T06:27:21.571903Z","shell.execute_reply.started":"2024-11-11T06:27:21.559059Z","shell.execute_reply":"2024-11-11T06:27:21.571082Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Image(results_path + \"train/val_batch2_labels.jpg\", width=800)","metadata":{"execution":{"iopub.status.busy":"2024-11-11T06:27:25.86127Z","iopub.execute_input":"2024-11-11T06:27:25.861647Z","iopub.status.idle":"2024-11-11T06:27:25.880276Z","shell.execute_reply.started":"2024-11-11T06:27:25.861611Z","shell.execute_reply":"2024-11-11T06:27:25.879391Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Image(results_path + \"train/val_batch2_pred.jpg\", width=800)","metadata":{"execution":{"iopub.status.busy":"2024-11-11T06:27:27.195501Z","iopub.execute_input":"2024-11-11T06:27:27.196213Z","iopub.status.idle":"2024-11-11T06:27:27.214839Z","shell.execute_reply.started":"2024-11-11T06:27:27.196171Z","shell.execute_reply":"2024-11-11T06:27:27.213904Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def validation_yolo_single_gpu(   \n    data_path: str=data_yml_path,\n    weights: str='/kaggle/working/runs/detect/train/weights/best.pt',\n    imgsz: int=640,\n    batch_size: int=batch_size,\n    conf: float=0.25,\n    iou: float=0.6,\n    device: str='0', \n    **kwargs\n    \n    ):\n    \n    model = YOLO(weights)\n    \n    validation_results = model.val(\n        data=data_path, \n        imgsz=imgsz, \n        batch=batch_size, \n        conf=conf, \n        iou=iou, \n        device=device,\n        **kwargs\n    )\n    \n    return validation_results\n\nvalidation_results = validation_yolo_single_gpu()","metadata":{"execution":{"iopub.status.busy":"2024-11-11T06:28:38.475551Z","iopub.execute_input":"2024-11-11T06:28:38.475942Z","iopub.status.idle":"2024-11-11T06:28:51.518788Z","shell.execute_reply.started":"2024-11-11T06:28:38.475904Z","shell.execute_reply":"2024-11-11T06:28:51.517704Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(validation_results.box.map)  # mAP50-95\nprint(validation_results.box.map50)  # mAP50\nprint(validation_results.box.map75)  # mAP75\nprint(validation_results.box.maps)  # list of mAP50-95 for each category","metadata":{"execution":{"iopub.status.busy":"2024-11-11T06:29:31.982914Z","iopub.execute_input":"2024-11-11T06:29:31.984237Z","iopub.status.idle":"2024-11-11T06:29:31.990867Z","shell.execute_reply.started":"2024-11-11T06:29:31.984189Z","shell.execute_reply":"2024-11-11T06:29:31.989887Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def prediction_yolo_single_gpu(   \n    source: str='/kaggle/input/potholes-detection-yolov8/sample_video.mp4',\n    weights: str='/kaggle/working/runs/detect/train/weights/best.pt',\n    conf: float=0.25,\n    save: bool=True,\n    **kwargs\n    ):\n    \n    model = YOLO(weights)\n\n    prediction_results = model.predict(\n        source=source,  # path ke data\n        conf=conf,  # confidence threshold\n        save=save,  # simpan hasil prediksi\n        **kwargs\n    )\n    \n    return prediction_results\n\nprediction_results = prediction_yolo_single_gpu()","metadata":{"execution":{"iopub.status.busy":"2024-11-11T06:29:46.86813Z","iopub.execute_input":"2024-11-11T06:29:46.868924Z","iopub.status.idle":"2024-11-11T06:30:01.983111Z","shell.execute_reply.started":"2024-11-11T06:29:46.868881Z","shell.execute_reply":"2024-11-11T06:30:01.982157Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nfrom base64 import b64encode\nfrom IPython.display import HTML, display\n\n# Path of input video after prediction\nsave_path = '/kaggle/working/runs/detect/predict/sample_video.avi'\n\n# Path of the output video to be compressed\ncompressed_path = \"/kaggle/working/result_compressed.mp4\"\n\n# Kompres video menggunakan ffmpeg\nos.system(f\"ffmpeg -i {save_path} -vcodec libx264 {compressed_path}\")\n\nif os.path.exists(compressed_path):\n    # Read the compressed video\n    with open(compressed_path, \"rb\") as video_file:\n        video_data = video_file.read()\n    \n    # Encode video in base64 so it can be displayed in HTML\n    data_url = \"data:video/mp4;base64,\" + b64encode(video_data).decode()\n\n    # Embed and display video on notebook\n    display(HTML(f\"\"\"\n    <video width=\"640\" height=\"480\" controls>\n          <source src=\"{data_url}\" type=\"video/mp4\">\n    </video>\n    \"\"\"))\nelse:\n    print(\"Video file not found.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-11-11T06:30:07.234232Z","iopub.execute_input":"2024-11-11T06:30:07.234617Z","iopub.status.idle":"2024-11-11T06:30:24.549755Z","shell.execute_reply.started":"2024-11-11T06:30:07.234578Z","shell.execute_reply":"2024-11-11T06:30:24.548744Z"},"trusted":true},"outputs":[],"execution_count":null}]}